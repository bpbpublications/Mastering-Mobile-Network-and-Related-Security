An example of a container image signing and verification code

#!/bin/bash
# Generate GPG keys for signing
gpg --gen-key
# Export the public key
gpg --armor --export "<your-email>" > public.key

# Sign container image using cosign
# First install cosign
curl -O -L https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64
sudo mv cosign-linux-amd64 /usr/local/bin/cosign
chmod +x /usr/local/bin/cosign

# Generate cosign key pair
cosign generate-key-pair

# Sign a container image
cosign sign --key cosign.key registry.example.com/myapp:1.0.0

# Verify a signed container image
cosign verify --key cosign.pub registry.example.com/myapp:1.0.0

# Using Docker Content Trust (Notary)
# Enable DCT
export DOCKER_CONTENT_TRUST=1

# Create a delegation key
docker trust key generate mykey
docker trust signer add --key mykey.pub mykey registry.example.com/myapp

# Sign and push image
docker trust sign registry.example.com/myapp:1.0.0

# Kubernetes manifest to enforce signing verification
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: image-signature-policy
spec:
  failurePolicy: Fail
  matchConstraints:
    resourceRules:
    - apiGroups: [""]
      apiVersions: ["v1"]
      operations: ["CREATE", "UPDATE"]
      resources: ["pods"]
  validations:
    - expression: "object.spec.containers.all(container, 
        trusted.containsImage(container.image))"
      message: "All container images must be signed by trusted authorities"

# Example of integration with CI pipeline (GitLab CI)
sign_verify_job:
  script:
    - |
      # Import signing keys
      echo "$COSIGN_PRIVATE_KEY" > cosign.key
      echo "$COSIGN_PUBLIC_KEY" > cosign.pub
      
      # Build and sign image
      docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
      cosign sign --key cosign.key $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
      
      # Verify signature before deployment
      cosign verify --key cosign.pub $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA

